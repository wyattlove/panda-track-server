=======================================
== To Do
=======================================

@setlocal
set JAVA_HOME=c:\java\jdk180_11_64x
set TOMCAT_HOME=c:\java\tomcat-8-x64
set CATALINA_HOME=%TOMCAT_HOME%
set CATALINA_OPTS=-Xms128m -Xmx128m
call %TOMCAT_HOME%\bin\%startup.bat


Add module menu.

Add projects.
Replace "accounts" with "projects" in the header.
Change userAccount => userProject.
Remove transferAccount
    invitation.stf
    various pages.
Remove auto-project for new users.

Remove the concept of "owned" accounts/projects.
    Adminstrators can see/edit ALL projects.
    Managers can see/edit their projects.
    But each project may have many Managers, not a single owner.    

Current project
    Is currently stored in the server session.
    It does not sync with the browser back button.
    E.g.: select Project A, select Project B, browser back, B is still selected.
    Move to page session?
    
Tab Header
    The tab header (html title) is not initially updated when you first enter the app.
    It is subsequently updated when you navigate to the next page.

Help
    Add page level help; to the pageTitle.
    Add field level help; next to fields.

Gap Layout
    Consider a simpler "gap" method.
    The W3C specifies that box "margins" collapse under the conditions that we usually 
    care about; and only the larger of the two margins takes effect.
    
    Per http://www.w3.org/TR/CSS2/box.html#collapsing-margins
    Margins collapse iff:
        - both belong to in-flow block-level boxes that participate in the same block formatting context
        - no line boxes, no clearance, no padding and no border separate them
        - both belong to vertically-adjacent box edges

    So... instead of:
        .gap                    { padding: 10px  0px  0px 10px }
        .gap > *                { margin:   0px 10px 10px  0px }
        
    Perhaps we can simply use:
        .gap > *                { margin:   10px }
    
    This requires additional testing.  This may not work for certain cases.

    
        
    

    
=======================================
== UX
=======================================

The following may provide some examples and ideas:
    pinterest (ux)
    theme forest (admin)

=======================================
== Key Classes
=======================================

A few classes that are helpful to know about when getting started.
The focus is on classes that are not necessarily obvious when tracing
code.

    * MyInstaller
    


=======================================
== Browser Compatibility
=======================================

    IE 8+       (needs css :after)
    FF 3.5+
    Chrome
    Safari 3


=======================================
== Security and URLs
=======================================

Current thoughts on urls and security...

For improved security, browsers generally prohibit javascript 
from making requests to any host other than the one that 
served the page in the first place.  This is generally referred
to as the "same origin policy."

The Same Origin Policy even disallows requests across subdomains.
E.g.: the following pages cannot access each other:
    sub1.domain.com
    sub2.domain.com
    
On the other hand, cookies CAN be shared across sub-domains.
This may not be the default, and may require setting an explicit
parameter when setting the cookie. 

So... thoughts on urls...

We are moving towards greater emphasis on consumer facing 
applications, and this is driving increased emphasis on 
product marketing.  For a variety of reasons, it is important 
to keep the hosting for the marketing site and the application
site separate.  These sites are maintained by different 
people with different skills and different tools.

The intent is to use the same _domain_ for both the marketing
site and the application site, but to split them across 
different subdomains.  E.g.:
    marketing:   www.mydomain.com
    application: app.mydomain.com

The Same Origin Policy will still prevent javascript from 
making requests across the subdomains.  However, we can 
share cookies between the subdomains and this will simplify
a variety of cases.  Assuming the marketing site has already
created a pertinent cookie (e.g.: an affiliate), then the
marketing site can pass control to the application with a 
simple url, and the application can then pull the affiliate
code directly out of the original cookie.
  
http://en.wikipedia.org/wiki/Same_origin_policy
http://en.wikipedia.org/wiki/HTTP_cookie


=======================================
== Javascript
=======================================

$('document').ready(someFunction);

    Run some function when the DOM is ready.
    Does not wait for all resources (e.g.: images) to be loaded.
    
    
$('window').load(someFunction);

    Run some function when the entire window has been loaded.
    Waits for all resources (e.g.: images) to be loaded.


function removeBodyChildren()
{
    var b = document.body;
    while ( b.hasChildNodes() )
        b.removeChild(b.firstChild);
}


var forceReload = true;    
window.location.reload(forceReload);

=======================================
== css
=======================================

min-width: 75px;
width: expression(this.width < 75 ? 75: true);
            
font: italic bold 14px sans-serif
    
=======================================
== java
=======================================

    ScReplaceContentsScript r;
    r = ajax().replaceContents();
    r.setOuterSelector("#layoutCenter");
    r.setInnerSelector("#layoutCenter");
    r.setContents(e);


    
=======================================
== concepts / glossary
=======================================
    
flavor
    Alternate ui formats for an individual control.  For example,
    a group may have multiple flavors for things like: normal, warning,
    error, nested.  When controls have multiple flavors, those flavors 
    are all listed inside the .css file.
    
theme
    Alternate ui formats that apply to the entire application.  Switching
    the theme can affect nearly everything and requires a parallel definition
    of all web resources.  We have partial support for multiple themes, but
    the implementation is not complete.  Currently the application uses a 
    single, "default", theme.
      
=======================================
== css
=======================================

Class names that contain one or two dashes are interpreted by the 
code generator as composites.  The two accepted formats are:

    prefix-part-theme
    prefix-part

In the second format, the system will generate a "default" theme
with a null value.

This syntax allows us to auto-generate consistent css constants
rather than relying on fragile string literals.  For example, 
suppose we use a group box that contains a header, body, and 
footer; and that has different themes for normal and alert.  The
.css file may contain selectors like:

    group-header-normal
    group-body-normal
    group-footer-normal
    
    group-header-alert
    group-body-alert
    group-footer-alert
    
The code generator will then create fully named constants like:

    group_header_normal = "group-header-normal";
    group_body_normal   = "group-body-normal"; 
    ...

But since the css classes match the composite pattern additional 
constants will be generated like:

    group_prefix        = "group";
    group_part_header   = "header";
    group_part_body     = "body";
    group_part_footer   = "footer";
    group_theme_normal  = "normal";
    group_theme_alert   = "alert";
    
This pattern is not fool-proof, but is expected to significantly 
reduces the accidental disconnects between .css files and java
string literals.
      
=======================================
== common class prefixes
=======================================

We use various prefixes at the beginning of our class names. A few
of the common prefixes are:

    My - Used for local application specific files.
    Km - Used for the majority of the KodeMore open source library.
    Sc - Used for the Servlet Control library.


=======================================
== temp
=======================================

itemFilter(
{
    findValue: "w",
    itemSel: ".modelList-item",
    attrSels: [".modelList-itemTitle", ".modelList-itemSubtitle"]
});

/**
 * The following options are supported...
 *
 * findValue
 *      A string value to search for.
 *      Should NOT be used with findSel.
 *
 * findSel
 *      A string selector used to identify the field that contains the value to search for.
 *      Should NOT be used with findValue.
 *
 * itemSel
 *      A string selector that identifies the items to be shown or hidden.
 *      This is required.
 *
 * attrSels
 *      An array of string selectors used to identify one or more child elements of each item.
 */
function filterItems(options)
{
    var find = null;

    if ( options.findValue )
        find = options.findValue;
            
    if ( options.findSel )
        find = $(options.findSel).val();

    var itemSel = options.itemSel;
    var attrSels = options.attrSels;
    
    if ( !find )
    {
        $(itemSel).show();
        return;
    }
    
    find = find.toLowerCase();
    
    $(itemSel).each(function()
    {
        var e = $(this);
        var match = false;
        var n = attrSels.length;
        for ( var i=0; i<n; i++ )
        {
            var attr = e.find(attrSels[i]);
            if ( $(attr).text().toLowerCase().indexOf(find) >= 0 )
            {
                match = true;
                break;
            }
        }
        
        if ( match )
            e.show();
        else
            e.hide();
    });
}



Kmu.filterItems({"findSel":"#PJUQ","itemSel":"modelList-item","attrSels":["modelList-itemTitle","modelList-itemSubtitle"]})

$('#PJUQ').keyup(function(){Kmu.filterItems({"findSel":"#PJUQ","itemSel":"modelList-item","attrSels":["modelList-itemTitle","modelList-itemSubtitle"]});


function test(item)
{
    item = $(item);
    
    var selList = item.closest(".dmsContainer").find(".dmsSelectedList");
    var availList = item.closest(".dmsContainer").find(".dmsAvailableList");
    
    var avail = item.parent().hasClass("dmsAvailableList");
    if ( avail )
    {
        
        item.slideToggle();
        item.promise().done(function()
        {
            item.remove();
            selList.add(item);
            item.slideToggle();
        });
    }
}



function dmsToggle()
{
    var item = $(this).closest(".dmsItem");
    
    var selList = item.closest(".dmsContainer").find(".dmsSelectedList");
    var availList = item.closest(".dmsContainer").find(".dmsAvailableList");
    
    var targetList = item.parent().hasClass("dmsSelectedList")
        ? availList
        : selList;
    
    item.slideToggle(150);
    item.promise().done(function()
    {
        targetList.scrollTo(0);
        
        item.detach();
        item.prependTo(targetList);
        item.slideToggle(150);
    });
}
$('.dmsItemToggle').click(dmsToggle);


$('#PFAT').sortable({"handle":".dragHandle""update\":Kmu.dmsRenumber});



function xxx()
{
    window.open("", "_blank");
}






































    //##################################################
    //# variables
    //##################################################

    private ScCardFrame _frame;

    private ScCard      _checkEmailCard;
    private ScTextField _checkEmailField;

    private ScCard      _joinUserCard;
    private ScActionIF  _joinUserAction;
    private ScTextField _joinEmailField;
    private ScTextField _joinNameField;
    private ScDropdown  _joinRoleField;

    private ScCard      _createUserCard;
    private ScActionIF  _createUserAction;
    private ScTextField _createEmailField;
    private ScTextField _createNameField;
    private ScDropdown  _createRoleField;

    //##################################################
    //# setup
    //##################################################

    @Override
    public void setup()
    {
        _frame = getBody().addFrame();

        installCheckEmailCard();
        installJoinUserCard();
        installCreateUserCard();

        disableSave();
    }

    private void installCheckEmailCard()
    {
        _checkEmailCard = _frame.addCard();
        _checkEmailCard.beDefault();

        ScFieldset set;
        set = _checkEmailCard.addFieldset("Check Email");

        ScFieldLayout fields;
        fields = set.addFieldLayout();

        ScDiv row;
        row = fields.addDiv();
        row.setLabel("Email");
        row.css().smallChildMarginRight();

        _checkEmailField = row.addTextField();
        _checkEmailField.setValidator(MyUser.Meta.Email);

        ScActionButton button;
        button = row.addButton();
        button.setText("Check");
        button.setPostImage(MyButtonUrls.rightDown());
        button.setAction(newCheckEmailAction());
    }

    private void installJoinUserCard()
    {
        _joinUserCard = _frame.addCard();
        _joinUserAction = newJoinUserAction();

        ScFieldset set;
        set = _joinUserCard.addFieldset("Join Existing User");

        ScFieldLayout fields;
        fields = set.addFieldLayout();

        _joinEmailField = fields.addTextField();
        _joinEmailField.setLabel("Email");
        _joinEmailField.setReadOnly();

        _joinNameField = fields.addTextField();
        _joinNameField.setLabel("Name");
        _joinNameField.setReadOnly();

        _joinRoleField = fields.add(newRoleDropdown());
    }

    private void installCreateUserCard()
    {
        _createUserCard = _frame.addCard();
        _createUserAction = newCreateUserAction();

        ScFieldset set;
        set = _createUserCard.addFieldset("Create New User");

        ScFieldLayout fields;
        fields = set.addFieldLayout();

        ScDiv emailRow;
        emailRow = fields.addDiv();
        emailRow.setLabel("Email");
        emailRow.css().smallChildMarginRight();

        _createEmailField = emailRow.addTextField();
        _createEmailField.setReadOnly();

        emailRow.addLink("change", newChangeEmailAction());

        _createNameField = fields.addTextField();
        _createNameField.setLabel("Name");
        _createNameField.setValidator(MyUser.Meta.Name);

        _createRoleField = fields.add(newRoleDropdown());
    }

    //##################################################
    //# actions
    //##################################################

    private ScActionIF newCheckEmailAction()
    {
        return new ScAction(this)
        {
            @Override
            public void handle()
            {
                handleCheckEmail();
            }
        };
    }

    private ScActionIF newChangeEmailAction()
    {
        return new ScAction(this)
        {
            @Override
            public void handle()
            {
                handleChangeEmail();
            }
        };
    }

    private ScActionIF newCreateUserAction()
    {
        return new ScAction(this)
        {
            @Override
            public void handle()
            {
                handleCreateUser();
            }
        };
    }

    private ScActionIF newJoinUserAction()
    {
        return new ScAction(this)
        {
            @Override
            public void handle()
            {
                handleJoinUser();
            }
        };
    }

    //##################################################
    //# handle
    //##################################################

    private void handleCheckEmail()
    {
        _checkEmailField.ajax().focus();
        _checkEmailField.ajax().hideAllErrors();
        _checkEmailField.validate();

        String email = _checkEmailField.getValue();

        if ( !Kmu.isValidEmailAddress(email) )
            _checkEmailField.error("Invalid email.");

        MyUser user;
        user = getAccess().getUserDao().findEmail(email);

        if ( user == null )
        {
            ajaxShowCreateUserFor(email);
            return;
        }

        if ( getCurrentProject().hasMember(user) )
            _checkEmailField.error("Already a member.");

        ajaxShowJoinUserCardFor(user);
    }

    private void handleChangeEmail()
    {
        ajaxShowCheckEmailCard();
    }

    @Override
    protected void handleSave()
    {
        validate();

        MyMember e;
        e = getCurrentProject().addMember();
        e.applyFrom(this);
        e.saveDao();

        flushDao();

        MyManageDomainPage<MyMember> page;
        page = getPage();
        page.ajaxAddDomain(e);
        page.ajaxSelectDomain(e);
    }

    private void handleCreateUser()
    {
        String email = _createEmailField.getValue();
        String name = _createNameField.getValue();
        String roleCode = _createRoleField.getStringValue();
        MyMemberRole role = MyMemberRole.findCode(roleCode);

        MyUser user = getAccess().getUserDao().findEmail(email);
        if ( user == null )
        {
            user = new MyUser();
            user.setEmail(email);
            user.setName(name);
            user.setRoleOther();
            user.saveDao();
        }

        MyProject project = getCurrentProject();
        MyMember member = project.getMemberFor(user);

        if ( member == null )
        {
            member = project.addMember();
            member.setUser(user);
        }

        member.setRole(role);

        flushDao();

        ajax().toast("Added member.");
        getPage().ajaxAddDomain(member);
        getPage().ajaxSelectDomain(member);
    }

    private void handleJoinUser()
    {
        String email = _joinEmailField.getValue();
        String roleCode = _joinRoleField.getStringValue();
        MyMemberRole role = MyMemberRole.findCode(roleCode);

        MyUser user = getAccess().getUserDao().findEmail(email);
        if ( user == null )
            _joinEmailField.error("Invalid email.");

        MyProject project = getCurrentProject();
        MyMember member = project.getMemberFor(user);

        if ( member == null )
        {
            member = project.addMember();
            member.setUser(user);
        }

        member.setRole(role);

        flushDao();

        ajax().toast("Added member.");
        getPage().ajaxAddDomain(member);
        getPage().ajaxSelectDomain(member);
    }

    //##################################################
    //# ajax
    //##################################################

    private void ajaxShowCreateUserFor(String email)
    {
        _createEmailField.setValue(email);
        _createUserCard.ajaxPrint();

        ajaxEnableSave(_createUserAction);
    }

    private void ajaxShowJoinUserCardFor(MyUser user)
    {
        _joinEmailField.setValue(user.getEmail());
        _joinNameField.setValue(user.getName());
        _joinUserCard.ajaxPrint();

        ajaxEnableSave(_joinUserAction);
    }

    private void ajaxShowCheckEmailCard()
    {
        _frame.ajaxPrintDefault();

        ajaxDisableSave();
    }

    //##################################################
    //# support
    //##################################################

    private ScDropdown newRoleDropdown()
    {
        ScDropdown e;
        e = MyMember.Tools.newRoleDropdown();
        e.setValueAdaptor(MyMember.Meta.RoleCode);
        e.setValue(MyMemberRole.Worker);
        return e;
    }

