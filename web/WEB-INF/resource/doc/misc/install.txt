-----------------
Introduction
-----------------

    This describes how to set up a machine to act as a development box.

-----------------
Java JDK 1.8
-----------------

    This is a java project.
    Required version: 1.8.x

-----------------
Tomcat 7
-----------------

    We use tomcat for the Servlet container.
    Required Version: 7.x

    Install tomcat.

-----------------
Ant
-----------------

    Nearly all development tools (compile, run, generate code, etc...),
    have been designed to run from either Windows or Linux via common
    Ant scripts.

    Required Version: 1.8.x

    Location
    
        Our ant scripts are located at:
        
            $project/ant
        
        And are grouped into separate configurations based on usage.
        
            antSetup.xml    : Generally only used when setting up a project.
            antTools.xml    : Common tools used throughout development.
            
    Extra libraries

        Some scripts may require additional third party jar files.
          
        In particular, any scripts with tasks that access the
        production environment (e.g.: scp, sshexec) require the jsch*.jar.
        If ant generates an error about a missing library, is is likely that
        you need to copy the jar files in $project/ant/lib to $home/.ant/lib

    Shell Usage

        Open a shell (windows or linux).
        Navigate to the directory: $project/ant

        These instructions provide commands to run ant scripts from the 
        command line (shell).  You may need to add ant/bin to your path.
        Or alternatively just use the integrated eclipse tools.
        
        For example, to compile the application you can use:
        
            $project/ant> ant -f antTools.xml compile
         
    Eclipse Integration

        In practice, most developers call the ant scripts from within 
        eclipse.  Simply show the "Ant" view.  Then select the script file.
        You can then run specific targets by clicking on them.

-----------------
MySql Database
-----------------

    Download and install MySql 5.5 (or greater).
    
    Use default options with the following exceptions:

        Skip Sign-up
        Include Bin Directory: yes
        Root password: root
        Enable root access from remote machines: yes

    After MySql has installed you need to set it to use the
    UTC Timezone.  Add the following lines to the end of the
    options file: C:\Program Files\MySQL\MySQL Server 5.0\my.ini

        # application properties...
        
        # force timezone to utc
        default_time_zone=+0:00
        
        # timeout must be longer than hibernate
        wait_timeout=7200

	You will need to restart mysql (or reboot) after making these changes.

    The Windows XP firewall may prohibit MySql from installing.
    You can disable it at Control Panel > Windows Firewall

-----------------
Local Environment
-----------------

    There are several files that need to be updated to match your local
    environment.  
    
    Start by importing default versions of the various files.
    
        ant -f antSetup.xml importSettings
        (enter "default" when prompted)
        
    Once you have imported the default settings, you will need to manually
    update the following files to reflect your local configuration. 
    
        $project/bin/kmSetEnvLocal.bat
            This file defines the locations of java, ant, and tomcat,
            so that other batch files can find them.
    
        $project/web/WEB-INF/resource/property/overrides.txt
            This file overrides standard system properties to match your
            local configuration.

        $project/web/WEB-INF/resource/log4j/log4j.xml
            This control the log4j logging utility.  You may need to modify
            the file path.
            
        $project/web/WEB-INF/resource/webInstall/ROOT.xml
            This controls the tomcat servlet.  You need to ensure the 
            file path points to your $project/web folder.

    After you updated these files to match your local environment, you 
    should export them so that they can be saved to the git repo.
    
        ant -f antSetup.xml exportSettings
            Enter your personal login when prompted, this is typically
            a first initial + last name.  E.g. bsmith (for bob smith).
            

-----------------
Configure Eclipse
-----------------

    To avoid custom configuration of the o/s environment, we instead configure
    the environment of the ant script from within Eclipse:
    
        Run > External Tools > External Tool Configurations...
            > Environment (tab) > New...
            
            Name: CATALINA_HOME
            Value: <<your tomcat/catalina folder>>    

-----------------
Configure Tomcat
-----------------

    You already installed a base implementation of the Tomcat servlet container.
    Now that you have configured your local environment, you can point Tomcat
    to our application.  Simply run the ant script:
    
        ant -f antSetup.xml configureTomcat

    Note, this requires the eclipse configuration above.

-----------------
Compile Java
-----------------

    Compile the java application.

        ant -f antTools.xml compile

    If there are any errors (esp 'path not found') re-check kmSetEnvLocal.

-----------------
Bootstrap data
-----------------

    The database server was installed above.  However, for the application to
    run correctly the application schemas and tables need to be installed.
    
    First, sign in to the database via the MySql Command Line Client.  And
    then manually create the empty database/schema:
    
        create database paragon;
    
    You can then use the following ant script to initialize the database with
    the necessary tables and data:

        ant -f antSetup.xml installDatabase

-----------------
Eclipse Memory
-----------------

    To up the memory usage of the IDE, change the shortcut to something like:
        C:\devlTools\eclipse3.3\eclipse.exe -data $EclipseWorkspaces\$app -Xms512M -Xmx512M

-----------------
Eclipse Debugging
-----------------

    The following is NOT recommended.
    The debugging tools often cause more problems than they solve.
    That said, there are some instances where they may be appropriate.

    Tomcat can be started from within Eclipse so that debugging is through the IDE.
    Sysdeo is a good plugin, and it also comes with a plugin for Hot Code updates
    from within Eclipse.  To run Tomcat from within Eclipse for $app, $app needs
    to know where the property files for the app are (specifically, properties.txt
    and overrides.txt).  Go to Eclipse > Window > Preferences > Tomcat > JVM Settings -
    Under 'Append to JVM Parameters', add the following:
        -DAppPropertyDir=C:\projects\$app\resource\property

    To run an ant build from within Eclipse, right click in the Package Explorer
    view the file
        $app/java/build/build.xml

    Then do a Run As > Ant Build...  The default is the 'java' target (compile
    everything).  Note that running ant in this manner is not required if you
    are running Tomcat through Eclipse - Eclipse will automatically Hot Update
    (assuming you are using Sysdeo or equivalent) any code changes as soon as
    they are saved (and therefore automatically compiled).

-----------------
Launching Tomcat
-----------------

    Create a .bat file inside $tomcat/bin named something like "_startParagon.bat", 
    this will be the firle responsible for launching tomcat for this project.  The .bat
    file should contain the following:
   
        @setlocal
        set JAVA_HOME=<<your tomcat/catalina folder>>
        set TOMCAT_HOME=%~dp0%..
        set CATALINA_HOME=%~dp0%..
        set CATALINA_OPTS=-Xms512m -Xmx512m -XX:MaxPermSize=256m
        
        call %~dp0%startup.bat

    Create a shortcut to this file so you can easily launch tomcat with the appropriate 
    settings for this project.

[end]
