${javaAutoGenerationComment}

package ${package}.db.base;

import java.util.*;

import com.kodemore.collection.*;
import com.kodemore.exception.*;
import com.kodemore.exception.error.*;
import com.kodemore.log.*;
import com.kodemore.sql.*;
import com.kodemore.time.*;
import com.kodemore.utility.*;

import ${package}.db.*;
import ${package}.db.core.*;
import ${package}.db.misc.*;
import ${package}.model.*;
import ${package}.model.base.*;
import ${package}.model.core.*;
import ${package}.property.*;
import ${package}.service.*;
import ${package}.utility.*;

public class $(model.DbBaseClass)
    extends ${Prefix}AbstractDb<${model.f_Class}>
{
    //##################################################
    //# constructor
    //##################################################//

    public $(model.DbBaseClass)($(model.schema.DbAccessClass) e)
    {
        super(e);
    }

    //##################################################
    //# constants
    //##################################################//

    public static final String TABLE = "${model.f_sqlTable}";
    public static final String ALIAS = "$(model.sqlAlias)";

    <loop list="$model.fields" each="field">
    public static final String ${field.f_NAME} = "$(field.sqlColumn)";
    </loop>

    //##################################################
    //# get
    //##################################################//

    public ${model.f_Class} $(model.getter)($(model.primaryKeyArgs))
    {
        if ( isPrimaryKeyNull($(model.primaryKeyArgNames)) )
            return null;
        KmSqlSelect st = getSelect();
        <loop list="$model.primaryKeyFields" each="field">
        st.where().isEqual(ALIAS, ${field.f_NAME}, ${field.f_name});
        </loop>
        return composeFirst(st);
    }

    public boolean isPrimaryKeyNull($(model.primaryKeyArgs))
    {
        <loop list="$model.primaryKeyFields" each="field">
        if ( ${field.f_name} != null ) return false;
        </loop>
        return true;
    }

    public ${model.f_Class} $(model.getter)($(model.PkIF) pk)
    {
        return $(model.getter)($(model.primaryKeyGetters));
    }

    public boolean has${model.f_Name}($(model.primaryKeyArgs))
    {
        return $(model.getter)($(model.primaryKeyArgNames)) != null;
    }

    public boolean has${model.f_Name}($(model.PkIF) pk)
    {
        return $(model.getter)(pk) != null;
    }

    public ${model.f_Class} $(model.getter)ByKey(String key)
    {
        $(model.PkClass) pk = new $(model.PkClass)();
        pk.setKey(key);
        return $(model.getter)(pk);
    }

    public ${model.f_List} getAllAvailable()
    {
        KmSqlSelect st = getSelect();
        <loop list="$model.availableFields" each="field">
        st.where().isEqual(ALIAS, ${field.f_NAME}, true);
        </loop>
        return composeList(st);
    }

    public ${model.f_List} getAllWhere(String whereClause, Integer rowLimit)
    {
        KmSqlSelect st = getSelect();
        if ( Kmu.hasValue(whereClause) )
            st.where().setCondition(whereClause);
        return composeList(st, rowLimit);
    }
<if test="$model.isIdentity">

    public ${model.f_List} getAllById(Collection<Integer> ids)
    {
        ${model.f_List} v = new $(model.ListImpl)();
        for ( Integer id : ids )
        {
            KmSqlSelect st = getSelect();
            st.where().isEqual(ALIAS, ID, id);
            v.addAll(composeList(st));
        }
        return v;
    }

    public KmList<Integer> getAllIds()
    {
        KmSqlSelect st = createEmptySelect();
        st.selectInteger(ALIAS, ID);
        return composeIntegerList(st);
    }
</if>

    public int getCount()
    {
        KmSqlSelect st = getSelectCount();
        return composeCount(st);
    }

    <loop list="$model.singletonFields" each="field">
    <_header>
    //##################################################
    //# singletons
    //##################################################//

    </_header>
    public ${model.f_Name} ${field.f_getMethod}Singleton()
    {
        KmSqlSelect st = getSelect();
        st.where().isEqual(ALIAS, ${field.f_NAME}, true);
        return composeFirst(st);
    }

    </loop>
    //##################################################
    //# update
    //##################################################//

<if test="$model.isIdentity">
    public Integer insert(${model.f_Class} e)
    {
        KmSqlInsert st = _checkAndComposeInsert(e);
        Integer id = executeId(st);
        if ( id == null )
            error("Unable to insert ${model.f_Class}.  Reason unknown.");
        return id;
    }

    public void insertAll(${model.f_List} v)
    {
        insertAll(v, false, false, null);
    }

    public void insertAllOnDuplicateKeyUpdateColumnNoChange(${model.f_List} v, String onDupColumn)
    {
        insertAll(v, false, false, onDupColumn);
    }

    /**
     * Insert all of the values with a single batch insert statement.
     * If insertIds is true, then the id column is included in the insert.
     * If generateIds is true, then the ids will be explicitly set before
     * the records are inserted into the database.  Note: generateIds has
     * no effect if insertIds is false.
     *
     * Normally, insertIds, and generateIds should be false.  One or both
     * may be set to true for algorithms that require performance tuning.
     *
     * CRITICAL: the client must ensure single threaded access to the table
     * before setting insertIds to true.
     */

    public void insertAll(${model.f_List} v, boolean insertIds, boolean generateIds)
    {
        String onDupColumn = null;
        insertAll(v, insertIds, generateIds, onDupColumn);
    }

    public void insertAll(${model.f_List} v, boolean insertIds, boolean generateIds, String onDupColumn)
    {
        KmList&lt;${model.f_List}&gt; groups = v.splitByGroupSize(getBatchInsertGroupSize());
        for ( ${model.f_List} g : groups )
            _insertAll(g, insertIds, generateIds, onDupColumn);
    }

    public void _insertAll(${model.f_List} v, boolean insertIds, boolean generateIds, String onDupColumn)
    {
        KmSqlInsert st = _checkAndComposeInsert(v, insertIds, generateIds);
        st.onDuplicateKeyUpdateColumnNoChange(onDupColumn);
        execute(st);
    }

    public KmSqlInsert _checkAndComposeInsert(${model.f_Class} e)
    {
        ${model.f_List} v;
        v = new $(model.ListImpl)();
        v.add(e);
        return _checkAndComposeInsert(v, false, false);
    }

    public KmSqlInsert _checkAndComposeInsert(${model.f_List} v, boolean insertIds, boolean generateIds)
    {
        for ( ${model.f_Class} e : v )
        {
            defaultUpdateCount(e);
            e.validate();
            verifyNoMatching(e);
        }

        KmSqlInsert st = createEmptyInsert();
        if ( insertIds )
        {
            if ( generateIds )
                generateIds(v);
            st.$(model.identityField.sqlInsertAddColumn)($(model.identityField.NAME));
        }
    <loop list="$(model.nonIdentityFields)" each="field">
        st.$(field.sqlInsertAddColumn)(${field.f_NAME});
    </loop>

        for ( ${model.f_Class} e : v )
        {
            st.startNewRow();
            if ( insertIds )
                st.$(model.identityField.sqlInsertAddValue)(e.get$(model.identityField.Name)());
        <loop list="$(model.nonIdentityFields)" each="field">
            st.$(field.sqlInsertAddValue)(e.${field.f_getMethod}());
        </loop>
        }
        return st;
    }

    public void generateIds(${model.f_List} v)
    {
        int i = getNextId();
        for ( ${model.f_Class} e : v )
            e.setId(i++);
    }

    /**
     * Return the next (max+1) ID; return 1 if the table is empty.
     */
    public Integer getNextId()
    {
        Integer max = getMaximumId();
        if ( max == null )
            return 1;
        return max + 1;
    }

    /**
     * Return the maximum ID; return null if the table is empty.
     */
    public Integer getMaximumId()
    {
        KmSqlSelect st = createEmptySelect();
        st.selectMaximum(ALIAS, ID);
        return composeFirstInteger(st);
    }

</if>

<if test="$model.isNotIdentity">
    public void insert(${model.f_Class} e)
    {
        KmSqlInsert st = _checkAndComposeInsert(e);
        int n = execute(st);
        if ( n != 1 )
            error("Unable to insert ${model.f_Name}.  Reason unknown.");
    }

    public void insertAll(${model.f_List} v)
    {
        KmList&lt;${model.f_List}&gt; groups = v.splitByGroupSize(getBatchInsertGroupSize());
        String onDupColumn = null;
        for ( ${model.f_List} g : groups )
            _insertAll(g, onDupColumn);
    }

    public void insertAllOnDuplicateKeyUpdateColumnNoChange(${model.f_List} v, String onDupColumn)
    {
        KmList&lt;${model.f_List}&gt; groups = v.splitByGroupSize(getBatchInsertGroupSize());
        for ( ${model.f_List} g : groups )
            _insertAll(g, onDupColumn);
    }

    public void _insertAll(${model.f_List} v, String onDupColumn)
    {
        KmSqlInsert st = _checkAndComposeInsert(v);
        st.onDuplicateKeyUpdateColumnNoChange(onDupColumn);
        execute(st);
    }

    public KmSqlInsert _checkAndComposeInsert(${model.f_Class} e)
    {
        ${model.f_List} v;
        v = new $(model.ListImpl)();
        v.add(e);
        return _checkAndComposeInsert(v);
    }

    public KmSqlInsert _checkAndComposeInsert(${model.f_List} v)
    {
        for ( ${model.f_Class} e : v )
        {
            defaultUpdateCount(e);
            e.validate();
            verifyNoMatching(e);
        }

        KmSqlInsert st = createEmptyInsert();

    <loop list="$(model.nonIdentityFields)" each="field">
        st.$(field.sqlInsertAddColumn)(${field.f_NAME});
    </loop>

        for ( ${model.f_Class} e : v )
        {
            st.startNewRow();
        <loop list="$(model.nonIdentityFields)" each="field">
            st.$(field.sqlInsertAddValue)(e.${field.f_getMethod}());
        </loop>
        }
        return st;
    }
</if>

    public void defaultUpdateCount(${model.f_Class} e)
    {
        <if test="$model.hasUpdateCount">
        <_then>
        e.setUpdateCount(0);
        </_then>
        <_else>
        // nothing to do; this table does not have an update count.
        </_else>
        </if>
    }

    public void verifyNoMatching(${model.f_Class} e)
    {
        <if test="$model.uniqueFields.isEmpty">
        <_then>
        // nothing to do; this table does not have unique fields.
        </_then>
        <_else>
        <loop list="$model.uniqueFields" each="field">
        verifyNo${field.f_Name}(e);
        </loop>
        </_else>
        </if>
    }

    <loop list="$model.uniqueFields" each="field">
    public void verifyNo${field.f_Name}(${model.f_Class} e)
    {
        KmSqlSelect st = getSelect();
        st.where().isEqual(ALIAS, ${field.f_NAME}, e.${field.f_getMethod}());
        ${model.f_Class} o = composeFirst(st);
        if ( o != null )
            KmErrorUtility.throwNewUniqueError("${model.f_Class}", "${field.f_Name}", e.${field.f_getMethod}());
    }

    </loop>

    public void update(${model.f_Class} e)
    {
        e.validate();
        <if test="$model.hasSingleton" then="updateSingletons(e);" />
        KmSqlUpdate st = createEmptyUpdate();
        <loop list="$model.nonPrimaryKeyFields" each="field">
    <if test="$field.type.isDecimal">
    <_then>
        st.setValue(${field.f_NAME}, e.${field.f_getMethod}(), $field.type.rightDigits);
    </_then>
    <_else>
        st.setValue(${field.f_NAME}, e.${field.f_getMethod}());
    </_else>
    </if>

        </loop>
        <loop list="$model.primaryKeyFields" each="field">
        st.where().isEqual(${field.f_NAME}, e.${field.f_getMethod}());
        </loop>
        int i = execute(st);
        if ( i != 1 )
            error("Unable to update ${model.f_Class}.  Rows updated: %s.", i);
    }

    public void updateAll(${model.f_List} v)
    {
        for ( ${model.f_Class} e : v )
            update(e);
    }

<if test="$model.hasSingleton">
<_then>
    public void updateSingletons(${model.f_Class} o)
    {
        <loop list="$model.singletonFields" each="field">
        if ( o.${field.f_getMethod}() ) reset${field.f_Name}();
        </loop>
    }

    <loop list="$model.singletonFields" each="field">
    public void reset${field.f_Name}()
    {
        KmSqlUpdate st = createEmptyUpdate();
        st.setValue(${field.f_NAME}, false);
        execute(st);
    }

    </loop>
</_then>
</if>
    public void delete($(model.primaryKeyArgs))
    {
        KmSqlDelete st = createEmptyDelete();
        <loop list="$model.primaryKeyFields" each="field">
        st.where().isEqual(${field.f_NAME}, ${field.f_name});
        </loop>
        execute(st);
    }

    public void delete($(model.PkIF) e)
    {
        delete(<loop list="$model.primaryKeyFields" each="field" body="e.${field.f_getMethod}()" split=", "/>);
    }

    public void deleteAll()
    {
        KmSqlDelete st = createEmptyDelete();
        execute(st);
    }

    //##################################################
    //# select and compose
    //##################################################//

    public KmSqlSelect getSelect()
    {
        KmSqlSelect st = createEmptySelect();
        populateSelectColumnsToCompose(st, ALIAS);
        return st;
    }

    public void populateSelectColumnsToCompose(KmSqlSelect st, String alias)
    {
        <loop list="$model.fields" each="field">
        st.$(field.sqlSelect)(alias, ${field.f_NAME});
        </loop>
    }

    public void populateSelectColumns(KmSqlSelect st, String alias)
    {
        <loop list="$model.fields" each="field">
        st.selectColumn(alias, ${field.f_NAME});
        </loop>
    }

    public KmSqlSelect getSelectCount()
    {
        KmSqlSelect st = createEmptySelect();
        st.selectCount();
        return st;
    }

    public ${model.f_Class} read(KmSqlResultSet rs)
    {
        ${model.f_Class} e;
        e = new ${model.f_Class}();
        <loop list="$model.fields" each="field">
        e.${field.f_setMethod}(rs.$(field.sqlGetter)());
        </loop>
        return e;
    }

<if test="$model.hasUpdateCount">
    //##################################################
    //# locking / update counts
    //##################################################//

    public Integer getUpdateCount($(model.primaryKeyArgs))
    {
        KmSqlSelect st = createEmptySelect();
        st.selectInteger(ALIAS, UPDATE_COUNT);
        st.from(TABLE, ALIAS);
        <loop list="$model.primaryKeyFields" each="field">
        st.where().isEqual(ALIAS, ${field.f_NAME}, ${field.f_name});
        </loop>
        return composeFirstInteger(st);
    }

    public boolean incrementUpdateCount($(model.primaryKeyArgs))
    {
        Integer oldCount = getUpdateCount($(model.primaryKeyArgNames));
        if ( oldCount == null )
            return _insertCount($(model.primaryKeyArgNames));
        return _incrementCountRelaxed($(model.primaryKeyArgNames));
    }

    public boolean lockRow($(model.primaryKeyArgs))
    {
        Integer oldCount = getUpdateCount($(model.primaryKeyArgNames));
        if ( oldCount == null )
            return _insertCount($(model.primaryKeyArgNames));
        return _incrementCountStrict($(model.primaryKeyArgNames), oldCount);
    }

    public void lockRowFailing($(model.primaryKeyArgs))
    {
        if ( lockRow($(model.primaryKeyArgNames)) )
            return;
        KmErrorUtility.throwConcurrentAccessError("${model.f_Class}");
    }

    public void lockRowBlocking($(model.primaryKeyArgs))
    {
        ${Prefix}PropertyRegistry r = getSystemProperties();
        int n = r.getDatabaseRowLockFailureRetryCount() + 1;
        for ( int i=0; i<n; i++ )
        {
            if ( lockRow($(model.primaryKeyArgNames)) )
                return;
            Kmu.sleep(r.getDatabaseRowLockFailureRetryMs());
        }
        KmErrorUtility.throwConcurrentAccessError("${model.f_Class}");
    }

    public boolean _insertCount($(model.primaryKeyArgs))
    {
        KmSqlInsert st = createEmptyInsert();
        <loop list="$model.primaryKeyFields" each="field">
        st.$(field.sqlInsertSetValue)(${field.f_NAME}, ${field.f_name});
        </loop>
        st.setIntegerValue(UPDATE_COUNT, 1);
        return execute(st) == 1;
    }

    /**
     * Increment the updateCount without comparing the old value.
     * This method of incrementing is suitable when using the
     * updateCount to indicate caches are stale.  For locking, use
     * _incrementCountStrict.
     */
    public boolean _incrementCountRelaxed($(model.primaryKeyArgs))
    {
        KmSqlUpdate st = createEmptyUpdate();
        st.setLiteral(UPDATE_COUNT, UPDATE_COUNT + "+1");
        <loop list="$model.primaryKeyFields" each="field">
        st.where().isEqual(${field.f_NAME}, ${field.f_name});
        </loop>
        return execute(st) == 1;
    }

    /**
     * Increment the updateCount relative to an expected oldValue.
     * This method is suitable for incrementing the updateCount for
     * locking.  See also, _incrementCountRelaxed.
     */
    public boolean _incrementCountStrict($(model.primaryKeyArgs), Integer oldCount)
    {
        Integer newCount = (oldCount + 1) % MAXIMUM_UPDATE_COUNT;
        KmSqlUpdate st = createEmptyUpdate();
        st.setValue(UPDATE_COUNT, newCount);
        <loop list="$model.primaryKeyFields" each="field">
        st.where().isEqual(${field.f_NAME}, ${field.f_name});
        </loop>
        st.where().isEqual(UPDATE_COUNT, oldCount);
        return execute(st) == 1;
    }

</if>
    //##################################################
    //# misc
    //##################################################//

    public String getModel()
    {
        return "${model.f_name}";
    }

    <if test="$model.isReferenceData">
    public boolean isReferenceData()
    {
        return true;
    }

    </if>
    public $model.schema.DbAccessClass getAccess()
    {
        return ($model.schema.DbAccessClass)super.getAccess();
    }

    public String getTableName()
    {
        return TABLE;
    }

    public String getAliasName()
    {
        return ALIAS;
    }
}

