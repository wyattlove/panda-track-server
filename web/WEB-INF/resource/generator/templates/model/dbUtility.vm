${javaAutoGenerationComment}

package ${package}.db.misc;

import com.kodemore.exception.*;
import com.kodemore.log.*;
import com.kodemore.utility.*;

import ${package}.db.*;
import ${package}.db.core.*;
import ${package}.model.*;
import ${package}.property.*;

/**
 * The dbUtility acts as a convenience superclass for custom utility
 * classes that rely on access to multiple tables within a schema.
 */
public class $(schema.DbUtilityClass)
    extends ${Prefix}DbUtility
{
    //##################################################
    //# variables
    //##################################################//

    private $(schema.DbAccessClass) _access;

    //##################################################
    //# constructor
    //##################################################//

    public $(schema.DbUtilityClass)($(schema.DbAccessClass) e)
    {
        _access = e;
    }

    //##################################################
    //# db's
    //##################################################//

    <loop list="$(schema.models)" each="model">
    public $(model.DbClass) $(model.getter)Db()
    {
        return _access.$(model.getter)Db();
    }

    </loop>
    //##################################################
    //# support
    //##################################################//

    protected $(schema.DbAccessClass) getAccess()
    {
        return _access;
    }

<if test="$schema.isMultiple">
    public String get${schema.f_Name}Code()
    {
        return _access.get${schema.f_Name}Code();
    }

</if>
}
